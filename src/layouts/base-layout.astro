---
import Footer from '@/components/ui/footer.astro'
import Header from '@/components/ui/header.astro'
import Intro from '@/components/ui/intro.astro'
import Meta from '@/components/ui/meta.astro'

import '@/assets/style/misans-regular.css'
import '@/assets/style/misans-bold.css'

interface Props {
  description?: string
  label?: string
  title?: string
}

const { description = 'âœ¨ Coding with Love, Exploring the World.', label, title } = Astro.props
---

<!doctype html>
<html
  class="xat-html"
  lang="en"
>
  <head>
    <Meta description={description} />
    <title>{title ? `${title} | Xat` : 'Hi, Xat!'}</title>
  </head>
  <body
    class="min-h-screen flex flex-col items-center bg-secondary text-atom-dark dark:bg-secondary-dark dark:text-atom"
  >
    <Header />
    <Intro label={label} title={title} />
    <content class="w-full flex grow flex-col gap-8 rounded-xl bg-atom px-6 py-8 desktop:w-2/3 tablet:w-4/5 dark:bg-atom-dark">
      <slot />
    </content>
    <Footer />
  </body>
</html>

<style is:global>
  html {
    cursor: url(/cursor/default.svg), default;
    a, button, input[type="button"], input[type="submit"], [role="button"] {
      cursor: url(/cursor/pointer.svg), pointer;
    }
    textarea, input[type="text"], input[type="email"], input[type="search"], input[type="number"] {
      cursor: url(/cursor/text.svg), text;
    }
  }
  html.dark {
    cursor: url(/cursor/default_dark.svg), default;
    a, button, input[type="button"], input[type="submit"], [role="button"] {
      cursor: url(/cursor/pointer_dark.svg), pointer;
    }
    textarea, input[type="text"], input[type="email"], input[type="search"], input[type="number"] {
      cursor: url(/cursor/text_dark.svg), text;
    }
  }
  * {
    @apply 'selection:bg-primary selection:text-atom dark:selection:bg-primary-dark dark:selection:text-atom-dark';
  }
  ::view-transition-new(root) {
    mask: url('/switch.svg') top left / 0 no-repeat;
    mask-origin: top left;
    animation: scale 1.5s;
  }
  ::view-transition-old(root),
  .dark::view-transition-old(root) {
    animation: scale 1.5s;
    z-index: -1;
    transform-origin: top left;
  }
  @keyframes scale {
    to {
      mask-size: 400vmax;
    }
  }
</style>

<script is:inline>
  const theme = (() => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      return "dark";
    }
    return "light";
  })();

  if (theme === "light") {
    document.documentElement.classList.remove("dark");
  } else {
    document.documentElement.classList.add("dark");
  }
  window.localStorage.setItem("theme", theme);

  const handleToggle = () => {
    const element = document.documentElement;
    element.classList.toggle("dark");

    const isDark = element.classList.contains("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  };

  const handleToggleClick = () => {
    if (!document.startViewTransition) handleToggle();
    document.startViewTransition(handleToggle);
  };

  document
    .getElementById("theme-toggle")
    .addEventListener("click", handleToggleClick);

  document.addEventListener("astro:after-swap", () => {
    if (localStorage.getItem("theme") === "dark")
      document.documentElement.classList.toggle("dark", true);

    if (!document.getElementById("theme-toggle").hasAttribute("onclick"))
      document
        .getElementById("theme-toggle")
        .addEventListener("click", handleToggleClick);
  });
</script>
